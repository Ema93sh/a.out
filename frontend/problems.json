[{"pk": 1, "model": "practice.problem", "fields": {"languages": [1, 2, 3], "code": "ADDREV", "description": "<p>The Antique Comedians of Malidinesia prefer comedies to tragedies. Unfortunately, most of the ancient plays are tragedies. Therefore the dramatic advisor of ACM has decided to transfigure some tragedies into comedies. Obviously, this work is very hard because the basic sense of the play must be kept intact, although all the things change to their opposites. For example the numbers: if any number appears in the tragedy, it must be converted to its reversed form before being accepted into the comedy play.</p>\r\n<p>Reversed number is a number written in arabic numerals but the order of digits is reversed. The first digit becomes last and vice versa. For example, if the main hero had 1245 strawberries in the tragedy, he has 5421 of them now. Note that all the leading zeros are omitted. That means if the number ends with a zero, the zero is lost by reversing (e.g. 1200 gives 21). Also note that the reversed number never has any trailing zeros.</p>\r\n<p>ACM needs to calculate with reversed numbers. Your task is to add two reversed numbers and output their reversed sum. Of course, the result is not unique because any particular number is a reversed form of several numbers (e.g. 21 could be 12, 120 or 1200 before reversing). Thus we must assume that no zeros were lost by reversing (e.g. assume that the original number was 12).</p>\r\n<h3>Input</h3>\r\n<p>The input consists of&nbsp;<var>N</var>&nbsp;cases (equal to about 10000). The first line of the input contains only positive integer<var>N</var>. Then follow the cases. Each case consists of exactly one line with two positive integers separated by space. These are the reversed numbers you are to add.</p>\r\n<h3>Output</h3>\r\n<p>For each case, print exactly one line containing only one integer - the reversed sum of two reversed numbers. Omit any leading zeros in the output.</p>\r\n<h3>Example</h3>\r\n<pre>Sample input: \r\n\r\n3\r\n24 1\r\n4358 754\r\n305 794\r\n\r\nSample output:\r\n\r\n34\r\n1998\r\n1</pre>", "memoryLimit": 222, "title": "Adding Reversed Numbers", "sourceLimit": 1023, "decimalJudgeOn": false, "solutionVisible": true, "difficulty_score": 0, "timeLimit": 1, "dateAdded": "2013-02-02", "author": [1], "absoluteError": "0.0020000000000000000", "isVisible": true, "difficulty_votes": 0}}, {"pk": 2, "model": "practice.problem", "fields": {"languages": [1, 2, 3], "code": "ACODE", "description": "<p>Alice and Bob need to send secret messages to each other and are discussing ways to encode their messages:</p>\r\n<blockquote>\r\n<p><span style=\"text-decoration: underline;\">Alice:</span>&nbsp;&ldquo;Let&rsquo;s just use a very simple code: We&rsquo;ll assign &lsquo;A&rsquo; the code word 1, &lsquo;B&rsquo; will be 2, and so on down to &lsquo;Z&rsquo; being assigned 26.&rdquo;</p>\r\n<p><span style=\"text-decoration: underline;\">Bob:</span>&nbsp;&ldquo;That&rsquo;s a stupid code, Alice. Suppose I send you the word &lsquo;BEAN&rsquo; encoded as 25114. You could decode that in many different ways!&rdquo;</p>\r\n<p><span style=\"text-decoration: underline;\">Alice:</span>&nbsp;&ldquo;Sure you could, but what words would you get? Other than &lsquo;BEAN&rsquo;, you&rsquo;d get &lsquo;BEAAD&rsquo;, &lsquo;YAAD&rsquo;, &lsquo;YAN&rsquo;, &lsquo;YKD&rsquo; and &lsquo;BEKD&rsquo;. I think you would be able to figure out the correct decoding. And why would you send me the word &lsquo;BEAN&rsquo; anyway?&rdquo;</p>\r\n<p><span style=\"text-decoration: underline;\">Bob:</span>&nbsp;&ldquo;OK, maybe that&rsquo;s a bad example, but I bet you that if you got a string of length 5000 there would be tons of different decodings and with that many you would find at least two different ones that would make sense.&rdquo;</p>\r\n<p><span style=\"text-decoration: underline;\">Alice:</span>&nbsp;&ldquo;How many different decodings?&rdquo;</p>\r\n<p><span style=\"text-decoration: underline;\">Bob:</span>&nbsp;&ldquo;Jillions!&rdquo;</p>\r\n</blockquote>\r\n<p>For some reason, Alice is still unconvinced by Bob&rsquo;s argument, so she requires a program that will determine how many decodings there can be for a given string using her code.</p>\r\n<h3>Input</h3>\r\n<p>Input will consist of multiple input sets. Each set will consist of a single line of at most 5000 digits representing a valid encryption (for example, no line will begin with a 0). There will be no spaces between the digits. An input line of &lsquo;0&rsquo; will terminate the input and should not be processed.</p>\r\n<h3>Output</h3>\r\n<p>For each input set, output the number of possible decodings for the input string. All answers will be within the range of a 64 bit signed integer.</p>\r\n<h3>Example</h3>\r\n<pre><strong>Input:</strong>\r\n\r\n25114\r\n1111111111\r\n3333333333\r\n0\r\n\r\n<strong>Output:</strong>\r\n\r\n6\r\n89\r\n1</pre>", "memoryLimit": 222, "title": "Alphacode", "sourceLimit": 123123, "decimalJudgeOn": false, "solutionVisible": true, "difficulty_score": 0, "timeLimit": 1, "dateAdded": "2013-02-02", "author": [1], "absoluteError": "0.0000020000000000000", "isVisible": true, "difficulty_votes": 0}}]